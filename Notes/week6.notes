# Error Handling in Express

Example Notes:


# Server
// Server
const express = require("express");
const app = express();
const morgan = require('morgan')
// Middleware (for every request) //
app.use(express.json()); // Looks for a request body, and turns it into 'req.body'
app.use(morgan('dev')); // Logs requests to the console.
// Routes
app.use("/bounties", require("./bounty_route2/bountyRouter2.js"));
// Error handling
app.use((err, req, res, next) => {
    console.log(err)
    return res.send({errMsg: err.message})
})
// Server Listen //
app.listen(8000, () => {
    console.log("The sever is running on Port 8000");
});


# Router
// movieRouter.js
const express = require("express");
const bountyRouter2 = express.Router();
const { v4: uuidv4 } = require('uuid');
// Data
const bounties = [
    {
        firstName: "Sam",
        lastName: "Newman",
        living: true,
        bountyAmount: 1000,
        type: "Sith",
        _id: uuidv4()
    },
    {
        firstName: "John",
        lastName: "Smith",
        living: false,
        bountyAmount: 1500,
        type: "Jedi",
        _id: uuidv4()
    },
    {
        firstName: "Peter",
        lastName: "Jones",
        living: true,
        bountyAmount: 2000,
        type: "Jedi",
        _id: uuidv4()
    },
    {
        firstName: "Joseph",
        lastName: "Thompson",
        living: false,
        bountyAmount: 900,
        type: "Sith",
        _id: uuidv4()
    }
]
// Routes
// Get All
bountyRouter2.get("/", (req, res) => {
    res.send(bounties)
});
// Get One
bountyRouter2.get("/:bountyId", (req, res, next) => {
    const bountyId = req.params.bountyId
    const foundBounty = bounties.find(bounty => bounty._id === bountyId)
    if(!foundBounty){
        const error = new Error(`The item with id ${bountyId} was not found.`)
        return next(error)
    }
    res.send(foundBounty)
})
// Get by type
bountyRouter.get("/search/type", (req, res, next) => {
    const type = req.query.type
    if(!type){
        const error = new Error("You must provide a type")
        return next(error)
    }
    const filteredBounties = bounties.filter(bounty => bounty.type === type)
    res.send(filteredBounties)
})
// Post One
bountyRouter2.post("/", (req, res) => {
    const newBounty = req.body
    newBounty._id = uuidv4()
    bounties.push(newBounty);
    res.send(newBounty)     // previously res.send(`Successfully added ${newBounty.firstName} ${newBounty.lastName} to the database!`)
})
// Delete One
bountyRouter2.delete("/:bountyId", (req, res) => {
    const bountyId = req.params.bountyId
    const bountyIndex = bounties.findIndex(bounty => bounty._id === bountyId)
    bounties.splice(bountyIndex, 1)
    res.send("Successfully deleted bounty!")
})
// Update One
bountyRouter2.put("/:bountyId", (req, res) => {
    const bountyId = req.params.bountyId
    const updateBounty = req.body
    const bountyIndex = bounties.findIndex(bounty => bounty._id === bountyId)
    const updatedBounty = Object.assign(bounties[bountyIndex], updateBounty)
    res.send(updatedBounty)
})
module.exports = bountyRouter2



# Error Handling in Express
Example Notes:
# Server
// Server
const express = require("express");
const app = express();
const morgan = require('morgan')
// Middleware (for every request) //
app.use(express.json()); // Looks for a request body, and turns it into 'req.body'
app.use(morgan('dev')); // Logs requests to the console.
// Routes
app.use("/bounties", require("./bounty_route2/bountyRouter2.js"));
// Error handling
app.use((err, req, res, next) => {
    console.log(err)
    return res.send({errMsg: err.message})
})
// Server Listen //
app.listen(8000, () => {
    console.log("The sever is running on Port 8000");
});
# Router
// movieRouter.js
const express = require("express");
const bountyRouter2 = express.Router();
const { v4: uuidv4 } = require('uuid');
// Data
const bounties = [
    {
        firstName: "Sam",
        lastName: "Newman",
        living: true,
        bountyAmount: 1000,
        type: "Sith",
        _id: uuidv4()
    },
    {
        firstName: "John",
        lastName: "Smith",
        living: false,
        bountyAmount: 1500,
        type: "Jedi",
        _id: uuidv4()
    },
    {
        firstName: "Peter",
        lastName: "Jones",
        living: true,
        bountyAmount: 2000,
        type: "Jedi",
        _id: uuidv4()
    },
    {
        firstName: "Joseph",
        lastName: "Thompson",
        living: false,
        bountyAmount: 900,
        type: "Sith",
        _id: uuidv4()
    }
]
// Routes
// Get All
bountyRouter2.get("/", (req, res) => {
    res.status(200)
    res.send(bounties)
});
// Get One
bountyRouter2.get("/:bountyId", (req, res, next) => {
    const bountyId = req.params.bountyId
    const foundBounty = bounties.find(bounty => bounty._id === bountyId)
    if(!foundBounty){
        const error = new Error(`The item with id ${bountyId} was not found.`)
        res.status(500)
        return next(error)
    }
    res.status(200).send(foundBounty)
})
// Get by type
bountyRouter.get("/search/type", (req, res, next) => {
    const type = req.query.type
    if(!type){
        const error = new Error("You must provide a type")
        res.status(500)
        return next(error)
    }
    const filteredBounties = bounties.filter(bounty => bounty.type === type)
    res.status(200).send(filteredBounties)
})
// Post One
bountyRouter2.post("/", (req, res) => {
    const newBounty = req.body
    newBounty._id = uuidv4()
    bounties.push(newBounty);
    res.status(201).send(newBounty)     // previously res.send(`Successfully added ${newBounty.firstName} ${newBounty.lastName} to the database!`)
})
// Delete One
bountyRouter2.delete("/:bountyId", (req, res) => {
    const bountyId = req.params.bountyId
    const bountyIndex = bounties.findIndex(bounty => bounty._id === bountyId)
    bounties.splice(bountyIndex, 1)
    res.send("Successfully deleted bounty!")
})
// Update One
bountyRouter2.put("/:bountyId", (req, res) => {
    const bountyId = req.params.bountyId
    const updateBounty = req.body
    const bountyIndex = bounties.findIndex(bounty => bounty._id === bountyId)
    const updatedBounty = Object.assign(bounties[bountyIndex], updateBounty)
    res.status(201).send(updatedBounty)
})
module.exports = bountyRouter2



# Adding Status Codes to Routes
Status Codes:
    # 200 - Successful Request
    # 201 - Successful Insert / Sucessful update
    # 401 - Unauthorized (Used for user authentication)
    # 404 - Not found
    # 500 - Server error
    # https://http.cat  